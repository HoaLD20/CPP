Khái niệm:
	Iterator là một con trỏ được sử dụng để đại diện cho một phần tử nào đó.
	map<int, string>::iterator it;
    vector<int>::iterator it; 
    Mỗi container class trong STL (ngoại trừ các container đặc biệt như std::stack và std::queue) 
    đều chứa định nghĩa của một iterator bên trong.

Thư viện chuẩn C++
Vector
	push_back: them cuoi
	a.insert(a.begin(), 5): them dau
	
	a.pop_back: xoa cuoi
	a.erase(a.begin()): xoa dau
	
	a.front: lay dau
	a.back: lay cuoi
	
	a.empty: kiem tra rong
	a.resize: thay doi kich thuoc
	a.resize(5, 10): them 5 - a.size() - neu a.size <= 5 thi khong them
	a.resize(5): a.size > 5 -> giam xuong, a.size < 5 -> them 0 vao

List
	push_back: them cuoi
	push_front: them dau
	pop_back: xoa cuoi
	pop_front: xoa dau
	a.reverse(): dao nguoc danh sach
	size: kich thuoc danh sach
	a.remove(element): xoa pha tu
	list<int>::iterator position = myList.begin();
	position++;
	a.erase(position): xoa vi tri
Set
	Mặc định của set là các phần tử sẽ tăng dần
	unique element end elements are keys
	set thực hiện giống cây tìm kiếm nhị phân 
	size : trả về kích thước hiện tại của set. 
	empty : true nếu set rỗng, và ngược lại. 
	insert : Chèn phần tử vào set. 
	erase : xóa phần tử, có 2 kiểu xóa: xóa theo iterator, hoặc là xóa theo khóa. 
	clear : xóa tất cả set. 
	swap : đổi 2 set cho nhau. 
	empty() - boolean
	begin \
		   | trả về con trỏ của phần tử 
	end   /

	Truy cập phần tử:

	find : trả về itarator trỏ đến phần tử cần tìm kiếm. 
		Nếu không tìm thấy itarator trỏ về “end” của set. 
	lower_bound : trả về iterator đến vị trí phần tử bé nhất mà 
		không bé hơn (lớn hơn hoặc bằng) khóa (dĩ nhiên là theo phép so sánh), nếu không tìm thấy trả về vị trí “end” của set. 
	upper_bound: trả về iterator đến vị trí phần tử bé nhất mà lớn hơn khóa,
	 	nếu không tìm thấy trả về vị trí “end” của set.
	count : trả về số lần xuất hiện của khóa trong container. Nhưng trong set,
		 các phần tử chỉ xuất hiện một lần, nên hàm này có ý nghĩa là sẽ return 1 nếu khóa có trong container, và 0 nếu không có.

	Để duyệt vector theo chiều nghịch (từ phải qua trái) ta làm như sau:
		for (vector<int>::reverse_iterator it = a.rbegin(); it != a.rend(); it++)
	advance: lay phan tu bat ki thong qua itarator
Stack
Queue
Map
bitset


Tree
	chiều cao của cây con bên trái - chiều cao của cây con bên phải*